package io.trino.plugin.truera;

import java.util.Arrays;
import org.testng.annotations.Test;
import static org.testng.Assert.assertEquals;
public class TestROCAUCFunction {

    @Test
    public void testComputeAucRocConstantYs() {
        boolean[] ys = new boolean[3];
        double[] ysPred = new double[]{-1, 0, 1};
        assertEquals(ROCAUCFunction.computeRocAuc(ys, ysPred), Double.NaN);
    }

    @Test
    public void testComputeAucRocConstantYsPred() {
        // Check if first element is only true.
        boolean[] ys = new boolean[10];
        ys[0] = true;
        double[] ysPred = new double[10];
        assertEquals(ROCAUCFunction.computeRocAuc(ys, ysPred), 0.5);
        // Check if last element is only true.
        ys = new boolean[10];
        ys[ys.length - 1] = true;
        assertEquals(ROCAUCFunction.computeRocAuc(ys, ysPred), 0.5);
    }

    @Test
    public void testComputeAucRocRandomCase() {
        boolean[] ys = {false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false};
        double[] ysPred = {-0.2286298738575081, -0.26869038039536985, -0.312319527551126, 0.2734721402453152, -0.24223018509401162, 0.31503992286551685, 0.4046447140511742, 0.28792712595231496, 0.23384628640264638, 0.4428378129948476, 0.4543878651258779, -0.01374360133220165, 0.0007349034879994276, 0.09636778467067175, 0.13655154956520688, 0.17454951949942543, 0.4931408863331128, 0.23547728150236757, 0.37226953309841515, -0.15728692842143432, 0.15924354023313247, 0.4286270233907359, -0.4685474933247794, -0.25577981860345134, 0.4681668166617913, 0.11320750870358587, -0.2736801671178942, -0.3864589476069452, -0.399822172488029, 0.015685730721504587, 0.3321140926944811, 0.2530935731647217, -0.3959046404148484, -0.15179547616306643, -0.36416614908162126, -0.29774936545934994, -0.12315200126789438, -0.2644045710260078, -0.44906116392418005, -0.020580493381027964, -0.12273927226482872, -0.056684762439960235, -0.08061360953066143, -0.29603641015837856, -0.18856132377074108, 0.4235267740783706, -0.4606040899799605, 0.42625848143208045, -0.0011082145951951672, -0.10729132271105546, 0.05327228838675735, 0.23256669296146493, 0.44780010851745966, 0.3568537456277838, 0.1805343926823827, -0.21846170998705394, -0.18590956046362084, 0.2509080583778559, -0.22290770310271601, 0.09721402039749849, 0.12656860105942058, -0.4855359797468307, -0.39689924561298107, 0.06657447973146235, 0.2578990291023152, 0.4742641426354459, -0.18982849914795363, 0.2227804823488645, 0.35372747647450187, -0.4543332887713202, -0.2564141959803503, -0.3998731379722754, 0.4302966112027795, 0.20920354786320405, -0.3493332019987293, 0.22594844508851064, 0.3506301294801156, 0.49704339475860027, -0.06293993755501126, 0.3918169521501762, -0.09311136809088782, 0.1600693305289207, -0.15765165599671038, 0.45406593535839646, 0.25178211933304273, -0.10253079227341522, -0.07396783373899074, -0.2779385207339454, 0.39166810505415206, -0.21097405310184147, 0.49742358104577056, 0.2503826842835034, 0.06827961053326548, -0.14270071261942086, 0.2718756995005246, -0.40524883036019543, 0.017045033508361507, 0.38197771242907064, 0.26845558760844856, -0.0965167478978054};
        double auc = ROCAUCFunction.computeRocAuc(ys, ysPred);
        assertEquals(auc, 0.8187274909963985);
    }

}
